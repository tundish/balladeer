<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Balladeer - Blog</title><link href="https://tundish.github.io/balladeer/" rel="alternate"></link><link href="https://tundish.github.io/balladeer/feeds/blog.atom.xml" rel="self"></link><id>https://tundish.github.io/balladeer/</id><updated>2021-11-16T07:45:00+00:00</updated><entry><title>Easy Interactions</title><link href="https://tundish.github.io/balladeer/easy-interactions.html" rel="alternate"></link><published>2021-11-16T07:45:00+00:00</published><updated>2021-11-16T07:45:00+00:00</updated><author><name>tundish</name></author><id>tag:tundish.github.io,2021-11-16:/balladeer/easy-interactions.html</id><summary type="html">&lt;p class="first last"&gt;How to begin making your screenplay interactive.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="recap"&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tundish.github.io/balladeer/message-in-a-bottle.html"&gt;Last time&lt;/a&gt; we built &lt;cite&gt;10 Green Bottles&lt;/cite&gt;
in the form of a Balladeer screenplay. The structure we used is scalable to much larger projects.&lt;/p&gt;
&lt;p&gt;It wasn't interactive, though. And that's what we will implement today. We will put control in the
hands of the reader. It is they who get to control the action.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="drama-faces-both-ways"&gt;
&lt;h2&gt;Drama faces both ways&lt;/h2&gt;
&lt;p&gt;Up until now, our Drama class has served a supporting role. It has generated the Ensemble for
the screenplay, and it has defined properties which can be used in the Dialogue.&lt;/p&gt;
&lt;p&gt;Now it has another partner to play with; the User. The real job of a drama is to &lt;em&gt;mediate&lt;/em&gt; between
user and dialogue.&lt;/p&gt;
&lt;p&gt;The change is actually fairly simple. We will remove from the dialogue the responsibility of
modifying ensemble state. We will add two interactive commands by which the user can achieve that instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="methods-of-control"&gt;
&lt;h2&gt;Methods of control&lt;/h2&gt;
&lt;p&gt;The first thing to do is add a &lt;cite&gt;look&lt;/cite&gt; command. That will be a way for the user to find out how many bottles
are left. That command is implemented by this method on the Bottles class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_look&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;presenter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    look&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;What?&lt;/em&gt; This is a method whose only action is to set an attribute. It doesn't even return anything. So how by that
is &lt;em&gt;look&lt;/em&gt; achieved?&lt;/p&gt;
&lt;p&gt;It happens in the dialogue. The criteria for singing the number of bottles have changed to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Song&lt;/span&gt;
&lt;span class="gh"&gt;====&lt;/span&gt;

&lt;span class="gh"&gt;Many&lt;/span&gt;
&lt;span class="gh"&gt;----&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.count ([^01]+)
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.history[0].name do_look

|BOTTLES| green bottles, hanging on the wall.

&lt;span class="gh"&gt;One&lt;/span&gt;
&lt;span class="gh"&gt;---&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.count 1
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.history[0].name do_look

|BOTTLES| green bottle, hanging on the wall.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Drama objects maintain a history of user commands. They are stored most recent first. The condition
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;DRAMA.history[0].name&lt;/span&gt; do_look&lt;/tt&gt; means 'was my most recent command called &lt;em&gt;do_look&lt;/em&gt;?' If so, the dialogue
tells you how many bottles there are.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chains-of-command"&gt;
&lt;h2&gt;Chains of command&lt;/h2&gt;
&lt;p&gt;But how is the method &lt;em&gt;do_look&lt;/em&gt; associated with the command &lt;em&gt;look&lt;/em&gt;? That occurs by placing the string 'look'
in the &lt;em&gt;docstring&lt;/em&gt; of the &lt;em&gt;do_look&lt;/em&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring"&gt;Docstrings&lt;/a&gt; are a Python mechanism for explaining the purpose of a piece of code. Balladeer extends this approach
to define the syntax of user commands.&lt;/p&gt;
&lt;p&gt;This system is enormously powerful. You will be able to parse highly complex phrases and interpret them reliably
every time. That's an advanced topic for a later date though. We are going to keep it simple today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="breaking-changes"&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;p&gt;Here's the second method to add. This one breaks a bottle when the user enters 'bottle' or 'break'.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_bottle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;presenter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    bottle&lt;/span&gt;
&lt;span class="sd"&gt;    break&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unbroken&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fruition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;completion&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here's the scrap of dialogue which reacts to that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;All&lt;/span&gt;
&lt;span class="gh"&gt;---&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.history[0].name do_bottle

And if one green bottle should accidentally fall,
There&amp;#39;ll be...

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;property&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.prompt Type &amp;#39;look&amp;#39; to check the damage &amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how the dialogue can modify the user prompt. It's also possible to change the descriptions
of ensemble objects this way too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="keeping-active"&gt;
&lt;h2&gt;Keeping active&lt;/h2&gt;
&lt;p&gt;You can control which commands are available to the user at any time. One command can activate or deactivate
another. This is achieved by populating the &lt;em&gt;active&lt;/em&gt; set of the drama object with the methods allowed.&lt;/p&gt;
&lt;p&gt;So we have two or three more lines to initialize our drama object now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bottles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Drama&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_bottle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_look&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All that's required to process user commands is a couple of lines to prompt for input, and then to take the
appropriate action. And that's all handled for you by the &lt;cite&gt;deliver&lt;/cite&gt; method of the Drama class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;story&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;story&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deliver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;presenter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;presenter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In Balladeer, the Drama and the Dialogue each have an important role. The design goal is to keep
logical functionality within Python code, and maintain character dialogue as screenplay markup.&lt;/p&gt;
&lt;p&gt;At this point you should study the &lt;a class="reference external" href="https://github.com/tundish/balladeer/tree/master/examples/04_drama_parser"&gt;example directory&lt;/a&gt; so that this approach becomes familiar to you.&lt;/p&gt;
&lt;p&gt;Try running the example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd examples/04_drama_parser
~/balladeer-app/bin/python drama.py
&lt;/pre&gt;
&lt;p&gt;Here's the output from a typical session:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; look
3 green bottles, hanging on the wall.

&amp;gt; break
And if one green bottle should accidentally fall,
There'll be...

Type 'look' to check the damage &amp;gt; look
2 green bottles, hanging on the wall.

&amp;gt; bottle
And if one green bottle should accidentally fall,
There'll be...

Type 'look' to check the damage &amp;gt; look
1 green bottle, hanging on the wall.

&amp;gt; break
No green bottles hanging on the wall.
&lt;/pre&gt;
&lt;p&gt;In the next article, we'll take this interactive sing-song, and perform it over the Web.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="basics"></category><category term="tutorial"></category><category term="parser"></category></entry><entry><title>Message in a Bottle</title><link href="https://tundish.github.io/balladeer/message-in-a-bottle.html" rel="alternate"></link><published>2021-11-10T10:15:00+00:00</published><updated>2021-11-10T10:15:00+00:00</updated><author><name>tundish</name></author><id>tag:tundish.github.io,2021-11-10:/balladeer/message-in-a-bottle.html</id><summary type="html">&lt;p class="first last"&gt;Modifying State in ensemble objects.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="pour-implementation"&gt;
&lt;h2&gt;Pour implementation&lt;/h2&gt;
&lt;p&gt;In the &lt;a class="reference external" href="https://tundish.github.io/balladeer/property-and-the-state.html"&gt;last article&lt;/a&gt; we
took a very simple approach to &lt;em&gt;10 Green Bottles&lt;/em&gt;. Those bottles were just a number to us.&lt;/p&gt;
&lt;p&gt;Balladeer wants you to create  a complex world of believable characters.
So from now on, I think we should all start to care a bit more about the bottles.&lt;/p&gt;
&lt;p&gt;In this tutorial we are going to promote those bottles into the &lt;em&gt;Ensemble&lt;/em&gt;, as if they were characters in our play.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="model-behaviour"&gt;
&lt;h2&gt;Model behaviour&lt;/h2&gt;
&lt;p&gt;Once you begin to take a fantasy world that grew in your head, and implement it Python code, you have some
problems to solve. How do you fit the one into the other?&lt;/p&gt;
&lt;p&gt;Which idiom of Python best delivers the behaviour you need in your narrative? When I first went down
this path, I was beguiled by Python's powerful multiple-inheritance system. Imagine all the ways you can mix in
classes to simulate human behaviour:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Saxon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Warrior&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One very important detail defeats this approach. Python objects cannot change their type at runtime.
The Frog in Act One cannot become the Prince in Act Three. There are some tricks you can play, but if you go down
that route you will forever feel the friction of fighting the language.&lt;/p&gt;
&lt;p&gt;In Balladeer, behaviour is governed by &lt;em&gt;state&lt;/em&gt;. You can create any number of state types and store them on stateful
objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Actor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Stateful&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Actor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hengist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ethnicity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;saxon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Caste&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warrior&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;States are implemented as Python &lt;a class="reference external" href="https://docs.python.org/3/library/enum.html#module-enum"&gt;enumerations&lt;/a&gt;.
Access to &lt;em&gt;state&lt;/em&gt; is overloaded by type. The default type is &lt;em&gt;integer&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Caste&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warrior&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because enums can have methods, you can delegate functional behaviour to an object's state, rather
than its type.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;caste&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Caste&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;caste&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Caste&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warrior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luck&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;skill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;caste&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luck&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;skill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-glass-ensemble"&gt;
&lt;h2&gt;The Glass Ensemble&lt;/h2&gt;
&lt;p&gt;Back to our bottles, then (you can see this entire &lt;a class="reference external" href="https://github.com/tundish/balladeer/tree/master/examples/03_stateful_enum__state"&gt;code example&lt;/a&gt; online).&lt;/p&gt;
&lt;div class="section" id="drama-py"&gt;
&lt;h3&gt;drama.py&lt;/h3&gt;
&lt;p&gt;We are going to throw away our interlude function. Instead we'll populate the Ensemble with some stateful objects
to represent the bottles. Our Drama class looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bottles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Drama&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;population&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Stateful&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fruition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inception&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Stateful&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fruition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inception&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Stateful&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fruition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inception&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ensemble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;population&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;cite&gt;Fruition&lt;/cite&gt; type is built in to Balladeer. It comes into its own when used with the &lt;cite&gt;Gesture&lt;/cite&gt; state machine,
to which it's closely related. Gestures are an advanced topic. Your first screenplay almost certainly ought not
to use them. For now, all we need to know is that &lt;cite&gt;Fruition.inception&lt;/cite&gt; is an initial state, and
&lt;cite&gt;Fruition.completion&lt;/cite&gt; a terminal state.&lt;/p&gt;
&lt;p&gt;We now need a method of counting the unbroken bottles, which we can implement as a property:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;population&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fruition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Fruition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inception&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="song-rst"&gt;
&lt;h3&gt;song.rst&lt;/h3&gt;
&lt;p&gt;The entity declarations need to change to match one unbroken bottle from the Ensemble.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA
    &lt;span class="nc"&gt;:types:&lt;/span&gt; balladeer.Drama

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; BOTTLE
    &lt;span class="nc"&gt;:types:&lt;/span&gt;     balladeer.Stateful
    &lt;span class="nc"&gt;:states:&lt;/span&gt;    balladeer.Fruition.inception

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|BOTTLES|&lt;/span&gt; &lt;span class="ow"&gt;property&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.count
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The breaking of the bottle can now be achieved in the dialogue, by setting its &lt;cite&gt;Fruition&lt;/cite&gt; state to &lt;cite&gt;completion&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Song&lt;/span&gt;
&lt;span class="gh"&gt;====&lt;/span&gt;

&lt;span class="gh"&gt;Many&lt;/span&gt;
&lt;span class="gh"&gt;----&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.count ([^01]+)
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state 0

|BOTTLES| green bottles, hanging on the wall.

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;property&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; BOTTLE.state balladeer.Fruition.completion
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;property&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition, this frees up the drama integer state for use by the dialogue as well. In fact, this is its most
common application; to sequence a loop of varied dialogue until a more meaningful transition takes us elsewhere:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;One&lt;/span&gt;
&lt;span class="gh"&gt;---&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.count 1
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state 0

|BOTTLES| green bottle, hanging on the wall.

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;property&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; BOTTLE.state balladeer.Fruition.completion
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;property&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state 1

&lt;span class="gh"&gt;All&lt;/span&gt;
&lt;span class="gh"&gt;---&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state 1

And if one green bottle should accidentally fall,
There&amp;#39;ll be...

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;property&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state 0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="end-rst"&gt;
&lt;h3&gt;end.rst&lt;/h3&gt;
&lt;p&gt;We hit a slight snag at the end of the song. When there are no unbroken bottles left, this dialogue won't match
the ensemble. We'll add a second scene of dialogue for that case.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA
    &lt;span class="nc"&gt;:types:&lt;/span&gt; balladeer.Drama

&lt;span class="gh"&gt;End&lt;/span&gt;
&lt;span class="gh"&gt;===&lt;/span&gt;

&lt;span class="gh"&gt;None&lt;/span&gt;
&lt;span class="gh"&gt;----&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.count 0

No green bottles hanging on the wall.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We don't need specific criteria in the entity declaration. It's sufficient to define the folder in this order:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
drama.folder = [&amp;quot;song.rst&amp;quot;, &amp;quot;end.rst&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;Then when the first scene is unmatched, we fall back to the second.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bin-ends"&gt;
&lt;h2&gt;Bin Ends&lt;/h2&gt;
&lt;p&gt;In just a couple of tutorials, we've built a scalable structure for our Interactive Screenplay.
We can add more dialogue to our folder, and more Python modules (and unit tests) as we normally
would do in a coding project.&lt;/p&gt;
&lt;p&gt;There's just one element we haven't mentioned yet, and it's an important one.&lt;/p&gt;
&lt;p&gt;It's the parser. We'll talk about that next time.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="basics"></category><category term="tutorial"></category></entry><entry><title>Property and the State</title><link href="https://tundish.github.io/balladeer/property-and-the-state.html" rel="alternate"></link><published>2021-11-08T16:45:00+00:00</published><updated>2021-11-08T16:45:00+00:00</updated><author><name>tundish</name></author><id>tag:tundish.github.io,2021-11-08:/balladeer/property-and-the-state.html</id><summary type="html">&lt;p class="first last"&gt;How Drama and Dialogue communicate by modifying state.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="properties"&gt;
&lt;h2&gt;Properties&lt;/h2&gt;
&lt;p&gt;If you've done any Python programming, you may know what a property is.
It's a way of giving an object a &lt;em&gt;getter&lt;/em&gt; and a &lt;em&gt;setter&lt;/em&gt; for an internal attribute.&lt;/p&gt;
&lt;p&gt;It is intrinsic to Balladeer that a Drama and its Dialogue interact with each other.
The main way they do this is via a property called &lt;cite&gt;state&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;For this first example we'll treat that state as an integer value.
In a future article though, we'll discover that it's much more flexible than that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="green-bottles"&gt;
&lt;h2&gt;Green Bottles&lt;/h2&gt;
&lt;p&gt;We are going to create a version of the song &lt;cite&gt;10 Green Bottles&lt;/cite&gt;.
You can find the full &lt;a class="reference external" href="https://github.com/tundish/balladeer/tree/master/examples/01_drama_integer_state"&gt;code example&lt;/a&gt; in the Balladeer repository.&lt;/p&gt;
&lt;div class="section" id="drama-py"&gt;
&lt;h3&gt;drama.py&lt;/h3&gt;
&lt;p&gt;Here's a Drama class which on every turn reduces its integer state value by one:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bottles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Drama&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interlude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;facts&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Interlude methods are expected to return a dictionary.
Drama objects have a dictionary attribute called &lt;em&gt;facts&lt;/em&gt;. So for simplicity that can be our return value here.&lt;/p&gt;
&lt;p&gt;The state needs initially setting to 10, which we can do like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;drama&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bottles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="song-rst"&gt;
&lt;h3&gt;song.rst&lt;/h3&gt;
&lt;p&gt;The dialogue needs access to the number of bottles, so we'll use a &lt;a class="reference external" href="https://www.writethedocs.org/guide/writing/reStructuredText/"&gt;reStructuredText&lt;/a&gt; substitution to reference
the drama state property:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|BOTTLES|&lt;/span&gt; &lt;span class="ow"&gt;property&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main challenge to generating the lyrics correctly, is the way they change according to the number of
bottles.&lt;/p&gt;
&lt;p&gt;We use a &lt;a class="reference external" href="https://turberfield-dialogue.readthedocs.io/en/latest/syntax.html#condition-directive"&gt;condition&lt;/a&gt; directive to decide which form of words to use. Though state is an integer, in dialogue
files everything is treated as a string.&lt;/p&gt;
&lt;p&gt;Our conditional might look for an explicit string representation of the state integer, or we can define
a regular expression instead. Regexes must be supplied inside parentheses, just as you see here:&lt;/p&gt;
&lt;pre class="code rst literal-block"&gt;
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA
    &lt;span class="nc"&gt;:types:&lt;/span&gt; balladeer.Drama

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;|BOTTLES|&lt;/span&gt; &lt;span class="ow"&gt;property&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state

&lt;span class="gh"&gt;Song&lt;/span&gt;
&lt;span class="gh"&gt;====&lt;/span&gt;

&lt;span class="gh"&gt;Many&lt;/span&gt;
&lt;span class="gh"&gt;----&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state ([^01]+)

|BOTTLES| green bottles, hanging on the wall.

And if one green bottle should accidentally fall,
There'll be...

&lt;span class="gh"&gt;One&lt;/span&gt;
&lt;span class="gh"&gt;---&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state 1

|BOTTLES| green bottle, hanging on the wall.

And if one green bottle should accidentally fall,
There'll be...

&lt;span class="gh"&gt;None&lt;/span&gt;
&lt;span class="gh"&gt;----&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; DRAMA.state 0

No green bottles hanging on the wall.
&lt;/pre&gt;
&lt;p&gt;Please take a moment to download the example and run this yourself.&lt;/p&gt;
&lt;p&gt;This has been a simple case with which to start.
In the next article we will complicate things slightly in order to learn more features of Balladeer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="basics"></category><category term="tutorial"></category></entry><entry><title>Hello, World!</title><link href="https://tundish.github.io/balladeer/hello-world.html" rel="alternate"></link><published>2021-11-05T08:30:00+00:00</published><updated>2021-11-05T08:30:00+00:00</updated><author><name>tundish</name></author><id>tag:tundish.github.io,2021-11-05:/balladeer/hello-world.html</id><summary type="html">&lt;p class="first last"&gt;On why you should always do a 'Hello World'.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="a-tradition"&gt;
&lt;h2&gt;A tradition&lt;/h2&gt;
&lt;p&gt;People have been writing 'Hello, World!' programs since about 1972.
The object was to get a potentially complicated setup to do something simple.&lt;/p&gt;
&lt;p&gt;When you see 'Hello, World!' on the screen, you can be reassured that you've
figured out the correct compiler flags and now you can go and have some lunch.&lt;/p&gt;
&lt;p&gt;Fast forward to 2021, when in Python the equivalent is literally &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;print(&amp;quot;Hello,&lt;/span&gt; &lt;span class="pre"&gt;World!&amp;quot;)&lt;/span&gt;&lt;/tt&gt;.
I doubted the benefit of showing one here for Balladeer.&lt;/p&gt;
&lt;p&gt;It turns out well that I did. In writing this I came across a few inconveniences which
we could have done without. Those are all fixed now in &lt;a class="reference external" href="https://pypi.org/project/balladeer/0.12.0/"&gt;version 0.12.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A design feature of Balladeer is the way it separates screen dialogue from functional code.
To follow along, you'll need to create two new files; &lt;tt class="docutils literal"&gt;hello.rst&lt;/tt&gt; for dialogue and &lt;tt class="docutils literal"&gt;hello.py&lt;/tt&gt; for code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-rst"&gt;
&lt;h2&gt;hello.rst&lt;/h2&gt;
&lt;p&gt;Dialogue files are a &lt;a class="reference external" href="https://www.writethedocs.org/guide/writing/reStructuredText/"&gt;reStructuredText&lt;/a&gt; markup format. They consist of a top level heading
for the &lt;em&gt;scene&lt;/em&gt;, and below that one or more &lt;em&gt;shots&lt;/em&gt;. The titles for them can be whatever you like.&lt;/p&gt;
&lt;p&gt;Here's everything that goes in this file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Scene 1&lt;/span&gt;
&lt;span class="gh"&gt;=======&lt;/span&gt;

&lt;span class="gh"&gt;Shot 1&lt;/span&gt;
&lt;span class="gh"&gt;------&lt;/span&gt;

Hello, World!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-py"&gt;
&lt;h2&gt;hello.py&lt;/h2&gt;
&lt;p&gt;In this file goes the code we need to create the simplest possible Balladeer Story, then to
animate and render it.&lt;/p&gt;
&lt;p&gt;First we import a couple of classes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;balladeer&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Drama&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;balladeer&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll need a Drama object, whose dialogue folder will reference the previous &lt;em&gt;.rst&lt;/em&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;drama&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Drama&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;drama&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello.rst&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now our Story object, whose context is that drama:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;story&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;drama&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whenever we animate and render, we create a new Presenter object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;presenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;story&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;represent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under the hood, the Presenter here parses each Dialogue file (there is only one), checks its Entity constraints
(there are none) against the Ensemble (which we left empty). It then parses each Shot into a frame.&lt;/p&gt;
&lt;p&gt;We'll now iterate over the (one) frame, and animate it. Then iterate over each rendered line (only one again)
and print it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;presenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;presenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;story&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_frame_to_terminal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the command &lt;tt class="docutils literal"&gt;python hello.py&lt;/tt&gt; should show you:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Hello, World!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="and-after-lunch"&gt;
&lt;h2&gt;And after Lunch&lt;/h2&gt;
&lt;p&gt;From here, you can play at adding extra dialogue. Also check out &lt;a class="reference external" href="https://github.com/tundish/tea_and_sympathy"&gt;Tea and Sympathy&lt;/a&gt;.
The module &lt;tt class="docutils literal"&gt;story.py&lt;/tt&gt; shows how to accept text input and feed it as a command to the Drama.
There'll be more on that here soon.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="basics"></category><category term="tutorial"></category></entry><entry><title>Balladeer components</title><link href="https://tundish.github.io/balladeer/balladeer-components.html" rel="alternate"></link><published>2021-11-04T14:00:00+00:00</published><updated>2021-11-04T14:00:00+00:00</updated><author><name>tundish</name></author><id>tag:tundish.github.io,2021-11-04:/balladeer/balladeer-components.html</id><summary type="html">&lt;p class="first last"&gt;This article presents a diagram of the main components of Balladeer.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="interactions"&gt;
&lt;h2&gt;Interactions&lt;/h2&gt;
&lt;p&gt;The top-level object in Balladeer is the Story. And whether game, prose or poetry, a Story always has one
active Drama object. That object specifies where to find the corresponding Dialogue files.&lt;/p&gt;
&lt;p&gt;What's shared between Drama and Dialogue is the Ensemble.
That's simply a container for all characters and objects currently in context.
Both Drama and Dialogue can modify the state of objects in the Ensemble.&lt;/p&gt;
&lt;img alt="A diagram of the components of the Balladeer framework" class="pure-img align-center" src="https://tundish.github.io/balladeer/images/balladeer-interaction.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="operation"&gt;
&lt;h2&gt;Operation&lt;/h2&gt;
&lt;p&gt;Your Drama may define an &lt;em&gt;interlude&lt;/em&gt; function. That is called every time Balladeer generates output to display.
In that function you can put any logic which is invariant to user action.&lt;/p&gt;
&lt;p&gt;Then comes the process of &lt;em&gt;casting&lt;/em&gt;.
The Ensemble is offered to the Dialogue scripts. They specify which objects and characters they use,
and which states those must have.&lt;/p&gt;
&lt;p&gt;When suitable Dialogue is found, a Presenter object is created. The Presenter &lt;em&gt;animates&lt;/em&gt; the dialogue, calculating
how long the text will take to read, and when it must appear.&lt;/p&gt;
&lt;p&gt;The Presenter also carries out any instructions in the Dialogue which change state of Ensemble objects while the
scene is played out. This is &lt;em&gt;reaction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Control now passes to the Story, which renders the scene. Out of the box, Balladeer can render to a character
terminal, or in HTML5 for the browser experience.
The Dialogue format supports images, and playing audio and video.
You have complete freedom to restyle the display using CSS3.&lt;/p&gt;
&lt;p&gt;User &lt;em&gt;input&lt;/em&gt; can come in the form of free text, or web GUI forms and buttons.
That input is passed to the Drama to interpret and act upon.&lt;/p&gt;
&lt;p&gt;Balladeer's text parser system is innovative and very flexible.
Drama objects can recognize &lt;em&gt;commands&lt;/em&gt; of any complexity.
You can enable or disable those commands on the fly as required.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="basics"></category><category term="architecture"></category></entry><entry><title>Balladeer in brief</title><link href="https://tundish.github.io/balladeer/balladeer-in-brief.html" rel="alternate"></link><published>2021-11-03T10:30:00+00:00</published><updated>2021-11-03T10:30:00+00:00</updated><author><name>tundish</name></author><id>tag:tundish.github.io,2021-11-03:/balladeer/balladeer-in-brief.html</id><summary type="html">&lt;p class="first last"&gt;This is an introductory article. Start here if you know nothing about Balladeer.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="tell-me-a-story"&gt;
&lt;h2&gt;Tell me a Story&lt;/h2&gt;
&lt;p&gt;Story-telling is at the heart of human culture. We all have a right to tell our stories.&lt;/p&gt;
&lt;p&gt;In an internet-enabled world, with an open and semantic web, you might think that poetry and literature
would proliferate. I have to say I don't see that myself. There are places to find new writing online, but
not many. And where they exist, they are not always operated by the authors themselves.&lt;/p&gt;
&lt;p&gt;Is it possible for one individual to tell a story to the world, outside of corporate social media?&lt;/p&gt;
&lt;p&gt;Yes, it has always been possible. And now there is a free and modern option for those who want to do that in 2021.&lt;/p&gt;
&lt;p&gt;Its name is Balladeer.&lt;/p&gt;
&lt;img alt="A screenshot of the game Tower of Rapunzel" class="pure-img align-center" src="https://tundish.github.io/balladeer/images/tor-screen.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="drama-and-dialogue"&gt;
&lt;h2&gt;Drama and Dialogue&lt;/h2&gt;
&lt;p&gt;As an author in a Balladeer project, you supply two types of content; &lt;em&gt;Drama&lt;/em&gt; and &lt;em&gt;Dialogue&lt;/em&gt;.
Drama is code written in Python. It contains all the functionality of your piece.
Dialogue goes into text files, which have a structure and syntax akin to that of a traditional screenplay.&lt;/p&gt;
&lt;p&gt;If you are writing poetry, there may be no code at all. If your art is a game, there could be many
Drama modules for you to develop, along with unit tests to check they work correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-next"&gt;
&lt;h2&gt;Where Next?&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://tundish.github.io/balladeer/category/blog.html"&gt;Balladeer blog&lt;/a&gt; hosts regular articles on how to use the framework.
There is a demo game you can download and run too; it's called &lt;a class="reference external" href="https://github.com/tundish/tea_and_sympathy"&gt;Tea and Sympathy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Balladeer relies heavily on other libraries, known as the &lt;cite&gt;Turberfield&lt;/cite&gt; packages.
Each of those has its own &lt;a class="reference external" href="https://turberfield-dialogue.readthedocs.io/en/latest/"&gt;online documentation&lt;/a&gt;. You may also wish to read about &lt;a class="reference external" href="https://www.writethedocs.org/guide/writing/reStructuredText/"&gt;reStructuredText&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Don't forget you can post comments under the blog articles, or raise issues at the &lt;a class="reference external" href="https://github.com/tundish/balladeer"&gt;code repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have fun telling your Story!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="IF"></category><category term="basics"></category></entry></feed>